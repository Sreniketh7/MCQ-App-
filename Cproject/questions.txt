    Code:
	int m = -14; 
	int n = 6; 
	int o; 

	o = m % ++n; 
	n += m++ - o; 
	m <<= (o ^ n) & 3;

	Assuming two's-complement arithmetic, which one of the following correctly represents the values of m, n, and o after the execution of the code above? 
	(A) m = -26, n = -7, o = 0 	(B) m = -52, n = -4, o = -2 
	(C) m = -26, n = -5, o = -2	(D) m = -104, n = -7, o = 0 
	(E) m = -52, n = -6, o = 0 
	$A
	Which one of the following calls will open the file test.txt for reading by fgetc? 
	(A) fopen( "test.txt", "r" ); 
	(B) read( "test.txt" ) 
	(C) fileopen( "test.txt", "r" ); 
	(D) fread( "test.txt" ) 
	(E) freopen( "test.txt" ) 
	$A
	int x = 11 | 0x10; 

	What value will x contain in the sample code above? 

	(A) 3 	(B) 13 
	(C) 19 	(D) 25 
	(E) 27 
	$E
	Code:
	#include <stdio.h> 
	void func() 
	{ 
		   int x = 0; 
		   static int y = 0; 
		   x++; y++; 
		   printf( "%d -- %d::", x, y ); 
	} 
	void main() 
	{ 
		   func(); 
		   func(); 
	}
	What will the code above print when it is executed? 
	(A) 1 -- 1::1 -- 1 	(B) 1 -- 1::2 -- 1 
	(C) 1 -- 1::2 -- 2 	(D) 1 -- 0::1 -- 0 
	(E) 1 -- 1::1 -- 2 
	$E
	f = fopen( filename, "r" ); 
	Referring to the code above, what is the proper definition for the variable f? 
	(A) FILE f; 	(B) FILE *f;
	(C) int f; 	(D) struct FILE f; 
	(E) char *f; 
	$B
	int a [8] = { 0, 1, 2, 3 }; 
	The definition of a above explicitly initializes its first four elements. Which one of the following describes how the compiler treats the remaining four elements? 
	(A) Standard C defines this particular behavior as implementation-dependent. The compiler writer has the freedom to decide how the remaining elements will be handled. 
	(B) The remaining elements are initialized to zero(0).
	(C) It is illegal to initialize only a portion of the array. Either the entire array must be initialized, or no part of it may be initialized. 
	(D) As with an enum, the compiler assigns values to the remaining elements by counting up from the last explicitly initialized element. The final four elements will acquire the values 4, 5, 6, and 7, respectively. 
	(E) They are left in an uninitialized state; their values cannot be relied upon. 
	$B
	Code:
	int i = 4; 
	int x = 6; 
	double z; 
	z =  x / i; 
	printf("z=%.2f\n", z);What will print when the sample code above is executed? 
	(A) z=0.00 	(B) z=1.00
	(C) z=1.50 	(D) z=2.00 
	(E) z=NULL 
	$B
	char txt [20] = "Hello world!\0"; 
	How many bytes are allocated by the definition above? 
	(A) 11 bytes 	(B) 12 bytes 
	(C) 13 bytes 	(D) 20 bytes
	(E) 21 bytes 
	$D
	Code:
	int y[4] = {6, 7, 8, 9}; 
	int *ptr = y + 2; 
	printf("%d\n", ptr[ 1 ] );  

	What is printed when the sample code above is executed? 

	(A) 6 	(B) 7 
	(C) 8 	(D) 9
	(E) The code will not compile. 
	$D
	Code:
	int i; 
	void increment( int i ) 
	{ 
		   i++; 
	} 
	void main() 
	{ 
		   for(i = 0; i < 10; increment( i )) { }
		   printf("i=%d\n", i);  
	}
	What will happen when the program above is compiled and executed? 
	(A) It will not compile. 	(B) It will print out: i=9. 
	(C) It will print out: i=10. 	(D) It will print out: i=11. 
	(E) It will loop indefinitely.
	$E
	Code:
	main()
	{
		int i = 3;
		switch(i)
		{
			default: printf("zero");
			case 1:  printf("one");    break;				
			case 2:  printf("two");    break;
			case 3:  printf("three");  break;
		}
	}	
	What will happen when the program above is executed?
	(A) one	        (B) two 
	(C) three 	(D) four 
	(E) zero
	$C
	Code:
	main()
	{
		printf("%x",-1<<4);
	}

	Assume: Size of integer is 2 bytes
	What will happen when the program above is executed?

	(A) ffff	(B) 0fff
	(C) 0000	(D) fff0
	(E) ff0f
	$D
	Code:
	#define int char
	main()
	{
		int i=65;
		printf("sizeof(i)=%d",sizeof(i));
	}

	What will happen when the program above is executed?

	(A) 1	(B) 2
	(C) 3	(D) 4
	(E) Depends on compiler
	$A
	Code:
	#define square(x) x*x
	main()
	{
		int i;
		i = 64/square(4);
		printf("%d",i);
	}

	What will happen when the program above is executed?

	(A) 64	(B) 4
	(C) 0	(D) 16
	(E) 128
	$A
	Code:
	void main()
	{
		int a = 10, *b, **c, ***d, ****e;	
		b = &a;
		c = &b;
		d = &c
		e = &d;
		printf("%d, %d, %d, %d, %d", a, *b, **c, ***d, ****e);
	}
	What will happen when the program above is compiled and executed?

	(A) 10, 11, 12, 13	(B) 10, 10, 10, 10
	(C) 10, 0, 0, 0		(D) 10, garbage value, garbage value, garbage value
	(E) Compile error
	$B
	Code:
	void main()
	{
		struct structData {
			int a, b, c, d;
			float e, f, g;
			char h;
		}s1;
		union unionData	{
			int a, b, c, d;
			float e, f, g;
			char h;		
		}u1; 
		printf("sizeof(struct): %d  ", sizeof(s1));
		printf("sizeof(union): %d", sizeof(u1));
	}
	What will happen when the program above is executed?
	Assume: Size of integer is 2 bytes
	(A)sizeof(struct): 21  sizeof(union): 21
	(B)sizeof(struct): 7  sizeof(union): 4
	(C)sizeof(struct): 21  sizeof(union): 4
	(D)sizeof(struct): 15  sizeof(union): 4
	(E)sizeof(struct): 4  sizeof(union): 21
	$C
	Code:
	void main()
	{
		int a = 5;

		if(a = 0) printf("I m here\n");
		else      printf("How r u?");
	}
	What will happen when the program above is executed?
	(A) How r u?	(B) I m here
	(C) I m here
            How r u?	(D) Compile error
	(E) No ouput
	$A
	Code:
	void swap(int *a, int *b)
	{
		*a ^= *b ^= *a ^= *b;
	}
	void main()
	{		
		int x = 10,y = 8;
		swap(&x, &y);
		printf("x = %d y = %d", x, y);
	}	

	(A) 10, 8	(B) Compile error
	(C) 4, 1	(D) 0, 0
	(E) 8, 10
	$E
	Code:
	char* myFunc (char *ptr)
	{
		ptr += 3;
		return (ptr);
	} 
	void main()
	{
		char *x, *y;
		x = "HELLO";
		y = myFunc (x);
		printf ("y = %s \n", y);
	}
	What will print when the sample code above is executed? 
	(A) y = HELLO 	(B) y = ELLO 
	(C) y = LLO 	(D) y = LO
	(E) y = O 
	$D	
	Code:
	What is the result of 15>>2? 

	(A) 3	(B) 4
	(C) 15	(D) 0
	(E) 2
	$A